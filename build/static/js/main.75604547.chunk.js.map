{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["serverApi","axios","create","baseURL","App","useEffect","accessToken","URLSearchParams","window","location","search","get","a","params","access_token","console","log","getMLHId","then","res","data","status","mlh_data","form_data","setMLHData","setFormData","setSubmitted","submitted","setFieldDefault","field","useState","mlhData","formData","fieldDefault","handleSubmit","event","preventDefault","newFormData","Object","assign","target","value","userData","post","theme","as","py","onSubmit","mx","mb","width","px","htmlFor","id","name","defaultValue","ml","type","variant","onClick","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TASMA,G,MAAYC,IAAMC,OAAO,CAC9BC,QAAS,mDAmGKC,MAhGf,WACCC,qBAAU,WACT,IACMC,EADY,IAAIC,gBAAgBC,OAAOC,SAASC,QACxBC,IAAI,gBAE9BL,GAAa,uCAChB,sBAAAM,EAAA,+EAEeZ,EAAUW,IAAI,YAAa,CACvCE,OAAQ,CACPC,aAAcR,KAJlB,wEAQES,QAAQC,IAAR,MARF,wDADgB,oDAYhBC,GAAWC,MAAK,SAAAC,GACf,GAAwB,OAApBA,EAAIC,KAAKC,OAAiB,CAAC,IAAD,EACGF,EAAIC,KAA5BE,EADqB,EACrBA,SAAUC,EADW,EACXA,UAClBC,EAAWF,GACXG,EAAYF,GACZG,EAAaH,EAAUI,WAEvBC,EAAgBL,EAAUM,YAE1Bd,QAAQC,IAAI,gCAIb,IA9BW,MAgCgBc,mBAAS,IAhCzB,mBAgCPC,EAhCO,KAgCEP,EAhCF,OAiCkBM,mBAAS,IAjC3B,mBAiCPE,EAjCO,KAiCGP,EAjCH,OAkCoBK,oBAAS,GAlC7B,mBAkCPH,EAlCO,KAkCID,EAlCJ,OAoC0BI,mBAAS,IApCnC,mBAoCPG,EApCO,KAoCOL,EApCP,KAsCRM,EAAY,uCAAG,WAAMC,GAAN,iBAAAvB,EAAA,6DACpBuB,EAAMC,iBACAC,EAAcC,OAAOC,OAC1B,GACAP,EACA,CAAEL,UAAWA,GACb,CACCE,MAAOM,EAAMK,OAAO,GAAGC,QAGnBC,EAAW,CAAEpB,SAAUS,EAASR,UAAWc,GACjDtB,QAAQC,IAAI0B,GAXQ,kBAcb1C,EAAU2C,KAAK,cAAe,CACnCvB,KAAMsB,IAfY,uDAkBnB3B,QAAQC,IAAR,MAlBmB,yDAAH,sDAwBlB,OAFkB,IAAIT,gBAAgBC,OAAOC,SAASC,QACxBC,IAAI,gBAMjC,kBAAC,IAAD,CAAeiC,MAAOA,KACrB,kBAAC,IAAD,CAAKC,GAAG,OAAOC,GAAI,EAAGC,SAAUb,GAC/B,kBAAC,IAAD,CAAMc,IAAK,EAAGC,GAAI,GACjB,kBAAC,IAAD,CAAKC,MAAO,GAAOC,GAAI,GACtB,kBAAC,IAAD,CAAOC,QAAQ,SAAf,SACA,kBAAC,IAAD,CACCC,GAAG,QACHC,KAAK,QACLC,aAActB,MAIjB,kBAAC,IAAD,CAAKkB,GAAI,EAAGK,GAAG,QACd,kBAAC,IAAD,CAAQC,KAAK,SAASC,QAAS,WAA/B,QAGA,kBAAC,IAAD,CACCD,KAAK,SACLE,QAAS,kBAAMjC,GAAa,IAC5BgC,QAAS,WAHV,aApBI,iEChEWE,QACW,cAA7BpD,OAAOC,SAASoD,UAEe,UAA7BrD,OAAOC,SAASoD,UAEhBrD,OAAOC,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,kB","file":"static/js/main.75604547.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ThemeProvider } from 'emotion-theming';\nimport theme from '@rebass/preset';\nimport { Box, Flex, Button } from 'rebass';\nimport { Label, Input, Select, Textarea, Radio, Checkbox } from '@rebass/forms';\nimport axios from 'axios';\n\nimport './App.css';\n\nconst serverApi = axios.create({\n\tbaseURL: 'https://created-2020-server.herokuapp.com/api'\n});\n\nfunction App() {\n\tuseEffect(() => {\n\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\tconst accessToken = urlParams.get('access_token');\n\n\t\tif (accessToken) {\n\t\t\tasync function getMLHId() {\n\t\t\t\ttry {\n\t\t\t\t\treturn await serverApi.get('authorise', {\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\taccess_token: accessToken\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgetMLHId().then(res => {\n\t\t\t\tif (res.data.status === 'OK') {\n\t\t\t\t\tconst { mlh_data, form_data } = res.data;\n\t\t\t\t\tsetMLHData(mlh_data);\n\t\t\t\t\tsetFormData(form_data);\n\t\t\t\t\tsetSubmitted(form_data.submitted);\n\n\t\t\t\t\tsetFieldDefault(form_data.field);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Error connecting to mlh');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, []);\n\n\tconst [mlhData, setMLHData] = useState({});\n\tconst [formData, setFormData] = useState({});\n\tconst [submitted, setSubmitted] = useState(false);\n\n\tconst [fieldDefault, setFieldDefault] = useState('');\n\n\tconst handleSubmit = async event => {\n\t\tevent.preventDefault();\n\t\tconst newFormData = Object.assign(\n\t\t\t{},\n\t\t\tformData,\n\t\t\t{ submitted: submitted },\n\t\t\t{\n\t\t\t\tfield: event.target[0].value\n\t\t\t}\n\t\t);\n\t\tconst userData = { mlh_data: mlhData, form_data: newFormData };\n\t\tconsole.log(userData);\n\n\t\ttry {\n\t\t\tawait serverApi.post('submit-form', {\n\t\t\t\tdata: userData\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tconst urlParams = new URLSearchParams(window.location.search);\n\tconst accessToken = urlParams.get('access_token');\n\tif (!accessToken) {\n\t\treturn <div>Error Not Authorised - Go away!</div>;\n\t}\n\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<Box as=\"form\" py={3} onSubmit={handleSubmit}>\n\t\t\t\t<Flex mx={-2} mb={3}>\n\t\t\t\t\t<Box width={1 / 2} px={2}>\n\t\t\t\t\t\t<Label htmlFor=\"field\">Field</Label>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tid=\"field\"\n\t\t\t\t\t\t\tname=\"field\"\n\t\t\t\t\t\t\tdefaultValue={fieldDefault}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t</Flex>\n\t\t\t\t<Box px={2} ml=\"auto\">\n\t\t\t\t\t<Button type=\"submit\" variant={'primary'}>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tonClick={() => setSubmitted(true)}\n\t\t\t\t\t\tvariant={'primary'}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}